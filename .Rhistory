debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/nate_files/fitGroupsV3Onegroup.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
file.exists(fit.fileid)
fit.fileid
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("util/apply_local_settings.R")
apply_local_settings()
knitr::opts_chunk$set(cache.path = paste0(localsettings$data.dir,"knitrcache"))
source("nate_files/fitGroupsV3Onegroup.R")
source("data_summarize.R")
library(data.table)
library(ggplot2)
source("du_model_revised_2aa_4runs_mcmc_firstniterations.R")
source("du_model_revised_2aa_4runs_mcmc_firstniterations.R")
names(model.summaries)
summar(model.summaries)
summary(model.summaries)
model.summaries[[1]]
i=2
ms<-model.summaries[[ms.i]]
ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
mod(length(ms$summaryObj$iter),3992)==0
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
names(model.summaries[[2]])
names(model.summaries[[2]]$summaryObj)
#arrange all the data into a single data table.
model.summary.all<-NULL
#iterations
miters<-unlist(lapply(model.summaries,function(m){
return(length(m$summaryObj$iter))
}))
for(ms.i in 1:length(model.summaries)){
#ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
#because when we ran this, we hadn't explicitly recorded estimation methods;
#but these are distinguishable by the number of iterations.
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
model.summary.all<-rbind(model.summary.all,ms.summaryObj)
}
}
#arrange all the data into a single data table.
model.summary.all<-NULL
#iterations
miters<-unlist(lapply(model.summaries,function(m){
return(length(m$summaryObj$iter))
}))
for(ms.i in 1:length(model.summaries)){
#ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
#because when we ran this, we hadn't explicitly recorded estimation methods;
#but these are distinguishable by the number of iterations.
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
print(ms.i)
print(colnames(model.summary.all))
print(colnames(ms.summaryObj))
model.summary.all<-rbind(model.summary.all,ms.summaryObj)
}
}
localsettings$data.dir
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
rbind
#arrange all the data into a single data table.
model.summary.all<-NULL
#iterations
miters<-unlist(lapply(model.summaries,function(m){
return(length(m$summaryObj$iter))
}))
for(ms.i in 1:length(model.summaries)){
#ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
#because when we ran this, we hadn't explicitly recorded estimation methods;
#but these are distinguishable by the number of iterations.
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
print(ms.i)
print(colnames(model.summary.all))
print(colnames(ms.summaryObj))
model.summary.all<-rbind(model.summary.all,ms.summaryObj,fill=TRUE)
}
}
model.summary.all$EstimationMethod<-factor(model.summary.all$EstimationMethod)
summary(model.summary.all$Motivation)
summary(model.summaries[[ms.i]])
summary(model.summaries[[10]])
summary(model.summaries[[0]])
summary(model.summaries[[9]])
summary(model.summaries[[8]])
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
model.summaries[[first_empty_list_pos]]
m
model.summaries[[first_empty_list_pos]]
model.summaries[[9]]
#arrange all the data into a single data table.
model.summary.all<-NULL
#iterations
miters<-unlist(lapply(model.summaries,function(m){
return(length(m$summaryObj$iter))
}))
for(ms.i in 1:length(model.summaries)){
#ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
#because when we ran this, we hadn't explicitly recorded estimation methods;
#but these are distinguishable by the number of iterations.
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
model.summary.all<-rbind(model.summary.all,ms.summaryObj,fill=TRUE)
}
}
model.summary.all$EstimationMethod<-factor(model.summary.all$EstimationMethod)
summary(model.summary.all$Motivation)
table(model.summary.all$Parameter)
table(model.summary.all$Parameter,model.summary.all$ModelName)
table(model.summary.all$Motivation,model.summary.all$ModelName)
table(model.summary.all$Motivation,model.summary.all$Parameter)
table(model.summary.all$Statistic,model.summary.all$Parameter)
table(model.summary.all[,.(Statistic,Parameter)])
table(model.summary.all[,.(Statistic,Parameter,ModelName)])
table(model.summary.all[ModelName=="double_update_notrialpost",.(Statistic,Parameter,ModelName)])
table(model.summary.all[ModelName=="double_update_notrialpost",.(Statistic,Parameter,Motivation)])
table(model.summary.all[ModelName=="double_update_notrialpost",.(Statistic,Parameter,Run)])
table(model.summary.all[ModelName=="double_update_notrialpost",.(Statistic,Parameter,TestId)])
table(model.summary.all[ModelName=="double_update_notrialpost",.(Statistic,Parameter,Group)])
table(model.summary.all[ModelName=="double_update_notrialpost",.(Statistic,Parameter,AnalysisRepetition)])
table(model.summary.all[ModelName=="double_update_notrialpost",.(Statistic,Parameter,EstimationMethod)])
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
parameter
as.character(p)
p
parameter
outcome_types[outcome.type]
outcome_types[outcome.type]
rep(parameter,item.count)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
c
c
#arrange all the data into a single data table.
model.summary.all<-NULL
#iterations
miters<-unlist(lapply(model.summaries,function(m){
return(length(m$summaryObj$iter))
}))
for(ms.i in 1:length(model.summaries)){
#ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
#because when we ran this, we hadn't explicitly recorded estimation methods;
#but these are distinguishable by the number of iterations.
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
model.summary.all<-rbind(model.summary.all,ms.summaryObj,fill=TRUE)
}
}
model.summary.all$EstimationMethod<-factor(model.summary.all$EstimationMethod)
table(model.summary.all$Parameter)
table(model.summary.all$Parameter,model.summary.all$Statistic)
table(model.summary.all[,.(Parameter,Statistic,ModelName)])
table(model.summary.all[,.(Parameter,Statistic,ModelName,Run)])
source("../visualization/geom_hdi.R")
source("../visualization/geom_hdi.R")
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("util/apply_local_settings.R")
apply_local_settings()
knitr::opts_chunk$set(cache.path = paste0(localsettings$data.dir,"knitrcache"))
source("nate_files/fitGroupsV3Onegroup.R")
source("data_summarize.R")
library(data.table)
library(ggplot2)
source("../visualization/geom_hdi.R")
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("util/apply_local_settings.R")
apply_local_settings()
knitr::opts_chunk$set(cache.path = paste0(localsettings$data.dir,"knitrcache"))
source("nate_files/fitGroupsV3Onegroup.R")
source("data_summarize.R")
library(data.table)
library(ggplot2)
source("../visualization/geom_hdi.R")
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("../visualization/geom_hdi.R")
source("visualization/geom_hdi.R")
source("visualization/geom_hdi.R")
m.reward.mu.run1<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Run==1]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.reward.mu.run1$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.reward.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.reward.mu.run1[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, beta"))
source("visualization/geom_hdi.R")
m.reward.mu.run1<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Run==1]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.reward.mu.run1$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.reward.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.reward.mu.run1[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, beta"))
m.mu<-model.summary.all[Statistic=="mu"]
m.mu$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
source("visualization/geom_hdi.R")
m.mu<-model.summary.all[Statistic=="mu"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.mu$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.mu[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.mu[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, beta"))
source("visualization/geom_hdi.R")
m.mu<-model.summary.all[Statistic=="mu"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.mu$ModelName<-sub("double_update","DU",m.mu$ModelName)
#plotly::ggplotly(p)
ggplot(m.mu[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.mu[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, beta"))
table(model.summary.all$ModelName)
m.onerunmodel<-model.summary.all[ModelName=="double_update_notrialpost"]
m.onerunmodel$ModelName<-sub("double_update","DU",m.onerunmodel$ModelName)
source("visualization/geom_hdi.R")
m.onerunmodel<-model.summary.all[ModelName=="double_update_notrialpost"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.onerunmodel$ModelName<-sub("double_update","DU",m.onerunmodel$ModelName)
#plot alpha, beta mu and sigma by group.
#plotly::ggplotly(p)
ggplot(m.onerunmodel[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.onerunmodel[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model"))
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
m.onerunmodel$RunMotivation<-paste0(m.onerunmodel$Run,m.onerunmodel$Motivation)
m.onerunmodel$RunMotivation<-paste0(m.onerunmodel$Run,m.onerunmodel$Motivation)
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
#why are there only two runs? It should have produced four...
m.onerunmodel$RunMotivation<-paste0(m.onerunmodel$Run,m.onerunmodel$Motivation)
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.onerunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
m.onerunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
ggplot(m.allrunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.allrunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model"))
table(model.summary.all$Run,model.summary.all$Motivation)
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
table(m.allrunmodel$Run,m.allrunmodel$Motivation)
table(m.allrunmodel$Run)
table(m.allrunmodel$Run,m.allrunmodel$Statistic)
set.seed(as.numeric(Sys.time())); sample.int(.Machine$integer.max-1000, 1)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
rl_unique_runids
rl_unique_runids
run_id[i, 1:useTrials] <- tmp$runid+as.numeric(tmp$Motivation=="punishment")*2
rl_unique_runids
summary(run_id)
summary(tmp$runid)
summary(tmp$runid+as.numeric(tmp$Motivation=="punishment")*2)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/nate_files/fitGroupsV3Onegroup.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
table(dataList[["run_id"]])
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
model.summaries[[first_empty_list_pos]]<-
list("summaryObj"=data_summarize_double_update_rev2_repeated_runs(extractedfit,comprehensive=FALSE,
outcome.type = rp,
run = runs),
"g"=g,"m"=m,"t"=t,"EstimationMethod"=em,"elapsedTime"=fitpackage$general_info$estimation_duration)
dim(fitpackage$plot_object)
names(fitpackage$plot_object)
fitpackage$general_info
fitpackage$model_text
names(fitpackage$fit)
dim(extractedfit$mu_alpha)
run
sample.count
run
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("util/apply_local_settings.R")
apply_local_settings()
knitr::opts_chunk$set(cache.path = paste0(localsettings$data.dir,"knitrcache"))
source("nate_files/fitGroupsV3Onegroup.R")
source("data_summarize.R")
library(data.table)
library(ggplot2)
source("du_model_revised_2aa_4runs_mcmc_firstniterations.R")
#arrange all the data into a single data table.
model.summary.all<-NULL
#iterations
miters<-unlist(lapply(model.summaries,function(m){
return(length(m$summaryObj$iter))
}))
for(ms.i in 1:length(model.summaries)){
#ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
#because when we ran this, we hadn't explicitly recorded estimation methods;
#but these are distinguishable by the number of iterations.
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
model.summary.all<-rbind(model.summary.all,ms.summaryObj,fill=TRUE)
}
}
model.summary.all$EstimationMethod<-factor(model.summary.all$EstimationMethod)
source("visualization/geom_hdi.R")
source("geom_hdi.R")
source("visualization/geom_hdi.R")
print(getwd())
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
print(getwd())
source("visualization/geom_hdi.R")
source("visualization/geom_hdi.R")
m.onerunmodel<-model.summary.all[ModelName=="double_update_notrialpost"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.onerunmodel$ModelName<-sub("double_update","DU",m.onerunmodel$ModelName)
#plot alpha, beta mu and sigma by group.
#plotly::ggplotly(p)
ggplot(m.onerunmodel[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.onerunmodel[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model"))
m.onerunmodel$RunMotivation<-paste0(m.onerunmodel$Run,m.onerunmodel$Motivation)
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model, by group"))
ggplot(m.onerunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model, by group"))
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
table(m.allrunmodel$Run)
ggplot(m.allrunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
table(m.allrunmodel$Run)
table(m.allrunmodel$Motivation)
summary(m.allrunmodel$Motivation)
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
summary(m.allrunmodel$Motivation)
ggplot(m.allrunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
summary(m.allrunmodel$Motivation)
ggplot(m.allrunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
ggplot(m.allrunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), beta, one run model"))
dim(model.summaries)
length(model.summaries)
dim(model.summaries[[10]])
length(model.summaries[[10]])
names(model.summaries[[10]])
dim(model.summaries[[10]]$summaryObj)
names(model.summaries[[10]]$summaryObj)
summary(model.summaries[[10]]$summaryObj$Run)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/data_summarize.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
mod(5,3)
10 %% 3
