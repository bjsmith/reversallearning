source("data_summarize.R")
library(data.table)
library(ggplot2)
source("../visualization/geom_hdi.R")
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("../visualization/geom_hdi.R")
source("visualization/geom_hdi.R")
source("visualization/geom_hdi.R")
m.reward.mu.run1<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Run==1]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.reward.mu.run1$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.reward.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.reward.mu.run1[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, beta"))
source("visualization/geom_hdi.R")
m.reward.mu.run1<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Run==1]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.reward.mu.run1$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.reward.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.reward.mu.run1[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, beta"))
m.mu<-model.summary.all[Statistic=="mu"]
m.mu$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
source("visualization/geom_hdi.R")
m.mu<-model.summary.all[Statistic=="mu"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.mu$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.mu[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.mu[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, beta"))
source("visualization/geom_hdi.R")
m.mu<-model.summary.all[Statistic=="mu"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.mu$ModelName<-sub("double_update","DU",m.mu$ModelName)
#plotly::ggplotly(p)
ggplot(m.mu[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.mu[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward rounds, beta"))
table(model.summary.all$ModelName)
m.onerunmodel<-model.summary.all[ModelName=="double_update_notrialpost"]
m.onerunmodel$ModelName<-sub("double_update","DU",m.onerunmodel$ModelName)
source("visualization/geom_hdi.R")
m.onerunmodel<-model.summary.all[ModelName=="double_update_notrialpost"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.onerunmodel$ModelName<-sub("double_update","DU",m.onerunmodel$ModelName)
#plot alpha, beta mu and sigma by group.
#plotly::ggplotly(p)
ggplot(m.onerunmodel[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.onerunmodel[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model"))
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
m.onerunmodel$RunMotivation<-paste0(m.onerunmodel$Run,m.onerunmodel$Motivation)
m.onerunmodel$RunMotivation<-paste0(m.onerunmodel$Run,m.onerunmodel$Motivation)
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
#why are there only two runs? It should have produced four...
m.onerunmodel$RunMotivation<-paste0(m.onerunmodel$Run,m.onerunmodel$Motivation)
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.onerunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
m.onerunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
ggplot(m.allrunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.allrunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model"))
table(model.summary.all$Run,model.summary.all$Motivation)
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
table(m.allrunmodel$Run,m.allrunmodel$Motivation)
table(m.allrunmodel$Run)
table(m.allrunmodel$Run,m.allrunmodel$Statistic)
set.seed(as.numeric(Sys.time())); sample.int(.Machine$integer.max-1000, 1)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
rl_unique_runids
rl_unique_runids
run_id[i, 1:useTrials] <- tmp$runid+as.numeric(tmp$Motivation=="punishment")*2
rl_unique_runids
summary(run_id)
summary(tmp$runid)
summary(tmp$runid+as.numeric(tmp$Motivation=="punishment")*2)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/nate_files/fitGroupsV3Onegroup.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
table(dataList[["run_id"]])
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
model.summaries[[first_empty_list_pos]]<-
list("summaryObj"=data_summarize_double_update_rev2_repeated_runs(extractedfit,comprehensive=FALSE,
outcome.type = rp,
run = runs),
"g"=g,"m"=m,"t"=t,"EstimationMethod"=em,"elapsedTime"=fitpackage$general_info$estimation_duration)
dim(fitpackage$plot_object)
names(fitpackage$plot_object)
fitpackage$general_info
fitpackage$model_text
names(fitpackage$fit)
dim(extractedfit$mu_alpha)
run
sample.count
run
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("util/apply_local_settings.R")
apply_local_settings()
knitr::opts_chunk$set(cache.path = paste0(localsettings$data.dir,"knitrcache"))
source("nate_files/fitGroupsV3Onegroup.R")
source("data_summarize.R")
library(data.table)
library(ggplot2)
source("du_model_revised_2aa_4runs_mcmc_firstniterations.R")
#arrange all the data into a single data table.
model.summary.all<-NULL
#iterations
miters<-unlist(lapply(model.summaries,function(m){
return(length(m$summaryObj$iter))
}))
for(ms.i in 1:length(model.summaries)){
#ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
#because when we ran this, we hadn't explicitly recorded estimation methods;
#but these are distinguishable by the number of iterations.
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
model.summary.all<-rbind(model.summary.all,ms.summaryObj,fill=TRUE)
}
}
model.summary.all$EstimationMethod<-factor(model.summary.all$EstimationMethod)
source("visualization/geom_hdi.R")
source("geom_hdi.R")
source("visualization/geom_hdi.R")
print(getwd())
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
print(getwd())
source("visualization/geom_hdi.R")
source("visualization/geom_hdi.R")
m.onerunmodel<-model.summary.all[ModelName=="double_update_notrialpost"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.onerunmodel$ModelName<-sub("double_update","DU",m.onerunmodel$ModelName)
#plot alpha, beta mu and sigma by group.
#plotly::ggplotly(p)
ggplot(m.onerunmodel[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.onerunmodel[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model"))
m.onerunmodel$RunMotivation<-paste0(m.onerunmodel$Run,m.onerunmodel$Motivation)
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model, by group"))
ggplot(m.onerunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model, by group"))
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
table(m.allrunmodel$Run)
ggplot(m.allrunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
table(m.allrunmodel$Run)
table(m.allrunmodel$Motivation)
summary(m.allrunmodel$Motivation)
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
summary(m.allrunmodel$Motivation)
ggplot(m.allrunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(Run),color=factor(Run)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
summary(m.allrunmodel$Motivation)
ggplot(m.allrunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
ggplot(m.allrunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), beta, one run model"))
dim(model.summaries)
length(model.summaries)
dim(model.summaries[[10]])
length(model.summaries[[10]])
names(model.summaries[[10]])
dim(model.summaries[[10]]$summaryObj)
names(model.summaries[[10]]$summaryObj)
summary(model.summaries[[10]]$summaryObj$Run)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/data_summarize.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations_test.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_revised_2aa_4runs_mcmc_firstniterations.R', echo=TRUE)
mod(5,3)
10 %% 3
rstan:::rstudio_stanc("nate_files/Final_Models/double_update_rev3.stan")
rstan:::rstudio_stanc("nate_files/Final_Models/double_update_rev3.stan")
rstan:::rstudio_stanc("nate_files/Final_Models/double_update_rev3.stan")
rstan:::rstudio_stanc("nate_files/Final_Models/double_update_rev3.stan")
rstan:::rstudio_stanc("nate_files/Final_Models/double_update_rev3.stan")
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("visualization/geom_hdi.R")
m.mu.run1<-model.summary.all[Motivation=="Punishment" & Statistic=="mu" & Run==1]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.mu.run1$ModelName<-sub("^double_update$","with trial posteriors",m.mu.run1$ModelName)
m.mu.run1$ModelName<-sub("^double_update_notrialpost$"," without trial posteriors",m.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(ModelName),color=factor(ModelName)))+
geom_freqpoly(alpha=0.5,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
coord_cartesian(xlim=c(0,0.5),ylim=c(0,80))+
facet_grid(AnalysisRepetition~EstimationMethod+Group,scales="fixed")+
labs(title=paste0("mu statistic in punishment rounds, alpha"))+scale_color_discrete(guide=guide_legend(title="Double Update Model..."))
source("visualization/geom_hdi.R")
m.mu.run1<-model.summary.all[Motivation=="Punishment" & Statistic=="mu" & Run==1]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
#m.mu.run1$ModelName<-sub("^double_update$","DU with trial posteriors",m.mu.run1$ModelName)
#m.mu.run1$ModelName<-sub("^double_update_notrialpost$"," DU without trial posteriors",m.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.mu.run1[Parameter=="alpha" & ModelName=="double_update_notrialpost" ],aes(x=Value,fill=factor(EstimationMethod),color=factor(EstimationMethod)))+
geom_freqpoly(alpha=0.5,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
coord_cartesian(xlim=c(0,0.5),ylim=c(0,80))+
facet_grid(AnalysisRepetition~Group,scales="free")+
labs(title=expression(paste(alpha[mu], " punishment rounds for DU model")))+
scale_color_discrete(guide=guide_legend(title="Double Update Model..."))
ggplot(m.mu.run1[Parameter=="beta" & ModelName=="double_update_notrialpost" ],aes(x=Value,fill=factor(EstimationMethod),color=factor(EstimationMethod)))+
geom_freqpoly(alpha=0.5,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
#coord_cartesian(xlim=c(0,0.5),ylim=c(0,80))+
facet_grid(AnalysisRepetition~Group,scales="free")+
labs(title=expression(paste(beta[mu], " punishment rounds for DU model")
))+
scale_color_discrete(guide=guide_legend(title="Double Update Model..."))
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
#class(model.stanfits[[5]])
i<-5
#for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_notrialpost"){
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summaries[[i]]$g,model.summaries[[i]]$m,model.summaries[[i]]$t,model.summary.all[,first(EstimationMethod),by=TestId][i,V1],"vars=",length(names(model.stanfits[[i]])))
#cols.to.process<-[names(model.stanfits[[i]]) %in%
cols.to.process<-names(model.stanfits[[i]])[!sapply(names(model.stanfits[[i]]),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
#print(cols.to.process)
stanplot<-plot(model.stanfits[[i]])
print(stanplot+labs(title=traceplot.title,x="log value",y="statistic"))#+scale_color_discrete(guide=guide_legend(nrows=1))+theme(legend.position = "bottom"))#+title(traceplot.title))
}
#class(model.stanfits[[5]])
i<-5
#for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_notrialpost"){
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summaries[[i]]$g,model.summaries[[i]]$m,model.summaries[[i]]$t,model.summary.all[,first(EstimationMethod),by=TestId][i,V1],"vars=",length(names(model.stanfits[[i]])))
#cols.to.process<-[names(model.stanfits[[i]]) %in%
cols.to.process<-names(model.stanfits[[i]])[!sapply(names(model.stanfits[[i]]),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
#print(cols.to.process)
stanplot<-plot(model.stanfits[[i]])
print(stanplot+labs(title=traceplot.title,x="log value",y="statistic"))#+scale_color_discrete(guide=guide_legend(nrows=1))+theme(legend.position = "bottom"))#+title(traceplot.title))
}
dim(model.summaries)
length(model.summaries)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
variable_run_lengths
variable_run_lengths
dataList[["R_N"]]
max(subj_runCounts)
summary(dataList)
m1
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
summary(extracted.data)
summary(extracted.data$s_mu_g_mu)
dim(extracted.data$s_mu_g_mu)
extracted.data$s_mu_g_mu[,p]
dim(extracted.data$s_mu_g_sigma)
dim(extracted.data$alpha_s_mu)
sample.count
sample.count<-dim(extracted.data$s_mu_g_mu)[1]#how many iterations of the sample are we looking at?
sample.count
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
debugSource('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/data_summarize.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
source('/expdata/bensmith/joint-modeling/code/msm/behavioral-analysis/reversallearning/du_model_rev2aa_compare_rev3_vb_fastdebug.R', echo=TRUE)
run.level.data
summary(extracted.data)
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("util/apply_local_settings.R")
apply_local_settings()
knitr::opts_chunk$set(cache.path = paste0(localsettings$data.dir,"knitrcache"))
source("nate_files/fitGroupsV3Onegroup.R")
source("data_summarize.R")
library(data.table)
library(ggplot2)
source("du_model_revised_2aa_4runs_mcmc_firstniterations.R")
#arrange all the data into a single data table.
model.summary.all<-NULL
#iterations
miters<-unlist(lapply(model.summaries,function(m){
return(length(m$summaryObj$iter))
}))
for(ms.i in 1:length(model.summaries)){
#ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
#because when we ran this, we hadn't explicitly recorded estimation methods;
#but these are distinguishable by the number of iterations.
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
model.summary.all<-rbind(model.summary.all,ms.summaryObj,fill=TRUE)
}
}
model.summary.all$EstimationMethod<-factor(model.summary.all$EstimationMethod)
#arrange all the data into a single data table.
model.summary.all<-NULL
#iterations
miters<-unlist(lapply(model.summaries,function(m){
return(length(m$summaryObj$iter))
}))
for(ms.i in 1:length(model.summaries)){
#ms.i=2
ms<-model.summaries[[ms.i]]
ms.summaryObj<-ms$summaryObj
ms.summaryObj$TestId<-ms.i
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
ms.summaryObj$EstimationMethod<-ms$EstimationMethod
#because when we ran this, we hadn't explicitly recorded estimation methods;
#but these are distinguishable by the number of iterations.
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
model.summary.all<-rbind(model.summary.all,ms.summaryObj,fill=TRUE)
}
}
model.summary.all$EstimationMethod<-factor(model.summary.all$EstimationMethod)
source("visualization/geom_hdi.R")
m.mu<-model.summary.all[Statistic=="mu"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.mu$ModelName<-sub("double_update","DU",m.mu$ModelName)
#plotly::ggplotly(p)
ggplot(m.mu[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward and punishment rounds, alpha"))
ggplot(m.mu[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~Run)+
labs(title=paste0("mu statistic in reward and punishment rounds, beta"))
source("visualization/geom_hdi.R")
m.onerunmodel<-model.summary.all[ModelName=="double_update_notrialpost"]
#table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.onerunmodel$ModelName<-sub("double_update","DU",m.onerunmodel$ModelName)
#plot alpha, beta mu and sigma by group.
#plotly::ggplotly(p)
ggplot(m.onerunmodel[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model"))
ggplot(m.onerunmodel[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(Statistic~Run)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model"))
m.onerunmodel$RunMotivation<-paste0(m.onerunmodel$Run,m.onerunmodel$Motivation)
ggplot(m.onerunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, alpha, one run model, by group"))
ggplot(m.onerunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value,fill=factor(RunMotivation),color=factor(RunMotivation)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic in reward and punishment rounds, beta, one run model, by group"))
m.allrunmodel<-model.summary.all[ModelName=="double_update_nov_rev2-a-a"]
summary(m.allrunmodel$Motivation)
ggplot(m.allrunmodel[Parameter=="alpha" & Statistic=="mu"],aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
ggplot(m.allrunmodel[Parameter=="beta" & Statistic=="mu"],aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), beta, variable number of runs model"))
