representativeness_stats(model.summaries[[1]],model.stanfits[[1]])
library(dplyr)
representativeness_stats(model.summaries[[1]],model.stanfits[[1]])
library(dplyr)
model.summary<-model.summaries[[1]]
model.stanfit<-model.stanfits
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary$EstimationMethod)
cols.to.process<-names(model.stanfits)[!sapply(names(model.stanfits),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
trace<-traceplot(model.stanfits,cols.to.process,alpha=0.5,inc_warmup=TRUE)
trace<-traceplot(model.stanfit,cols.to.process,alpha=0.5,inc_warmup=TRUE)
model.stanfit<-model.stanfits[[1]]
trace<-traceplot(model.stanfit,cols.to.process,alpha=0.5,inc_warmup=TRUE)
print(trace+labs(title=traceplot.title)+scale_color_discrete(guide=guide_legend(nrows=1))+theme(legend.position = "bottom"))
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary.all[,first(EstimationMethod),by=TestId][i,V1],"vars=",length(names(model.stanfit)))
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
print(model.stanfit,pars=c("mu_p","sigma"))
cols.to.process
names(model.stanfits)
names(model.stanfit)
lapply(model.summary,function(m){print(m$m)})
lapply(model.summaries,function(m){print(m$m)})
model.summary<-model.summaries[[13]]
model.stanfit<-model.stanfits[[13]]
representativeness_stats<-function(model.summary,model.stanfit){
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary$EstimationMethod)
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
#print(cols.to.process)
trace<-traceplot(model.stanfit,cols.to.process,alpha=0.5,inc_warmup=TRUE)
print(trace+labs(title=traceplot.title)+scale_color_discrete(guide=guide_legend(nrows=1))+theme(legend.position = "bottom"))
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary.all[,first(EstimationMethod),by=TestId][i,V1],"vars=",length(names(model.stanfit)))
#cols.to.process<-[names(model.stanfits[[i]]) %in%
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
#print(cols.to.process)
print(model.stanfit,pars=c("mu_p","sigma"))
}
representativeness_stats(model.summaries[[1]],model.stanfits[[1]])
representativeness_stats(model.summaries[[13]],model.stanfits[[13]])
print(model.stanfit,pars=c("mu_p","sigma"))
print(model.stanfit,pars=c("mu_p","sigma_p"))
lapply(model.summaries,function(m){print(paste0(m$m,m$g)})
#model.stanfit<-model.stanfits[[13]]
representativeness_stats<-function(model.summary,model.stanfit){
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary$EstimationMethod)
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
#print(cols.to.process)
trace<-traceplot(model.stanfit,cols.to.process,alpha=0.5,inc_warmup=TRUE)
print(trace+labs(title=traceplot.title)+scale_color_discrete(guide=guide_legend(nrows=1))+theme(legend.position = "bottom"))
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary.all[,first(EstimationMethod),by=TestId][i,V1],"vars=",length(names(model.stanfit)))
#cols.to.process<-[names(model.stanfits[[i]]) %in%
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
#print(cols.to.process)
print(model.stanfit,pars=c("mu_p","sigma_p"))
}
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_notrialpost"){
representativeness_stats(model.summaries[[i]],model.stanfits[[i]])
}
}
lapply(model.summaries,function(m){print(paste0(m$m,m$g))})
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary$EstimationMethod)
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
trace<-traceplot(model.stanfit,cols.to.process,alpha=0.5,inc_warmup=TRUE)
print(trace+labs(title=traceplot.title)+scale_color_discrete(guide=guide_legend(nrows=1))+theme(legend.position = "bottom"))
names(model.stanfit)
names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
model.stanfit<-model.stanfits[[1]]
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
cols.to.process
names(model.stanfit)
model.stanfit<-model.stanfits[[13]]
names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) || grepl("log_lik\\[",x))
})]
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) ||
grepl("alpha_s_r\\[",x) || grepl("beta_s_r",x) || grepl("alpha_s_sigma",x) || grepl("beta_s_sigma",x) ||
grepl("beta_r",x) || grepl("alpha_r",x)
|| grepl("log_lik\\[",x))
})]
cols.to.process
names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) ||
grepl("alpha_s_r\\[",x) || grepl("beta_s_r",x) || grepl("alpha_s_sigma",x) || grepl("beta_s_sigma",x) ||
grepl("beta_r",x) || grepl("alpha_r",x) || grepl("subj_alpha_s",x) || grepl("subj_beta_s",x)
|| grepl("log_lik\\[",x))
})]
names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) ||
grepl("alpha_s_r\\[",x) || grepl("beta_s_r",x) || grepl("alpha_s_sigma",x) || grepl("beta_s_sigma",x) ||
grepl("beta_r",x) || grepl("alpha_r",x) || grepl("subj_alpha_s",x) || grepl("subj_beta_s",x)
|| grepl("alpha_s",x)
|| grepl("beta_s",x)
|| grepl("log_lik\\[",x))
})]
representativeness_stats<-function(model.summary,model.stanfit,cols.to.process=NA){
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary$EstimationMethod)
if(is.na(cols.to.process)){
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) ||
grepl("alpha_s_r\\[",x) || grepl("beta_s_r",x) || grepl("alpha_s_sigma",x) || grepl("beta_s_sigma",x) ||
grepl("beta_r",x) || grepl("alpha_r",x) || grepl("subj_alpha_s",x) || grepl("subj_beta_s",x)
|| grepl("alpha_s",x)
|| grepl("beta_s",x)
|| grepl("log_lik\\[",x))
})]
}
#print(cols.to.process)
trace<-traceplot(model.stanfit,cols.to.process,alpha=0.5,inc_warmup=TRUE)
print(trace+labs(title=traceplot.title)+scale_color_discrete(guide=guide_legend(nrows=1))+theme(legend.position = "bottom"))
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary.all[,first(EstimationMethod),by=TestId][i,V1],"vars=",length(names(model.stanfit)))
#cols.to.process<-[names(model.stanfits[[i]]) %in%
#print(cols.to.process)
print(model.stanfit,pars=cols.to.process)
}
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a" & model.summaries[[i]]$g==1){
representativeness_stats(model.summaries[[i]],model.stanfits[[i]])
}
}
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a" & model.summaries[[i]]$g==1){
representativeness_stats(model.summaries[[i]],model.stanfits[[i]])
}
}
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a"# & model.summaries[[i]]$g==1
){
representativeness_stats(model.summaries[[i]],model.stanfits[[i]])
}
}
representativeness_stats<-function(model.summary,model.stanfit,cols.to.process=NA){
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary$EstimationMethod)
if(is.na(cols.to.process)){
cols.to.process<-names(model.stanfit)[!sapply(names(model.stanfit),function(x){
return(grepl("alpha\\[",x) || grepl("beta\\[",x) || grepl("alpha_pr",x) || grepl("beta_pr",x) ||
grepl("alpha_s_r\\[",x) || grepl("beta_s_r",x) || grepl("alpha_s_sigma",x) || grepl("beta_s_sigma",x) ||
grepl("beta_r",x) || grepl("alpha_r",x) || grepl("subj_alpha_s",x) || grepl("subj_beta_s",x)
|| grepl("alpha_s",x)
|| grepl("beta_s",x)
|| grepl("log_lik\\[",x))
})]
}
#print(cols.to.process)
trace<-traceplot(model.stanfit,cols.to.process,alpha=0.5,inc_warmup=FALSE)
print(trace+labs(title=traceplot.title)+scale_color_discrete(guide=guide_legend(nrows=1))+theme(legend.position = "bottom"))
#only look at these because looking at models with trial posteriors is unnecessary and timeconsuming.
traceplot.title<-paste("group=",model.summary$g,model.summary$m,model.summary$t,model.summary.all[,first(EstimationMethod),by=TestId][i,V1],"vars=",length(names(model.stanfit)))
#cols.to.process<-[names(model.stanfits[[i]]) %in%
#print(cols.to.process)
print(model.stanfit,pars=cols.to.process)
}
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a"# & model.summaries[[i]]$g==1
){
representativeness_stats(model.summaries[[i]],model.stanfits[[i]])
}
}
m.g1.mcmc<-model.summaries[[13]]
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a" & model.summaries[[i]]$g==1
){
print("got it")
m.g1.mcmc<-model.summaries[[i]]
m.sf.g1.mcmc<-model.stanfits[[i]]
}
}
ggplot(m.g1.mcmc[Parameter=="alpha" & Statistic=="mu"],aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
ggplot(m.g1.mcmc$summaryObj[Parameter=="alpha" & Statistic=="mu"],aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
source("visualization/geom_hdi.R")
ggplot(m.g1.mcmc$summaryObj[Parameter=="alpha" & Statistic=="mu"],aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Group)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
table(m.g1.mcmc$iter)
table(m.g1.mcmc$summaryObj$iter)
summary(m.sf.g1.mcmc$`mu_p[1]`)
summary(m.sf.g1.mcmc$mu_alpha)
summary(m.sf.g1.mcmc[["mu_alpha"]])
summary(m.sf.g1.mcmc@mu_alpha)
names(m.sf.g1.mcmc)
m.sf.g1.mcmc.extracted<-rstan::extract(m.sf.g1.mcmc)
summary(m.sf.g1.mcmc.extracted$mu_p)
dim(m.sf.g1.mcmc.extracted$mu_p)
m.sf.g1.mcmc.array<-as.array(m.sf.g1.mcmc)
m.sf.g1.mcmc.array
dim(m.sf.g1.mcmc.array)
colnames(m.sf.g1.mcmc.array)
names(m.sf.g1.mcmc.array)
rownames(m.sf.g1.mcmc.array)
dimnames(m.sf.g1.mcmc.array)
summary(m.sf.g1.mcmc.array[,"mp_p[1]",])
dim(m.sf.g1.mcmc.array)
summary(m.sf.g1.mcmc.array[,,"mp_p[1]"])
summary(m.sf.g1.mcmc.array[[,,"mp_p[1]"]])
summary(m.sf.g1.mcmc.array[[,,1]])
summary(m.sf.g1.mcmc.array[,,1])
hist(m.sf.g1.mcmc.array[,,1])
m.sf.g1.mcmc.mualpha<-m.sf.g1.mcmc.array[,,1]
m.sf.g1.mcmc.mualpha
m.sf.g1.mcmc.mualpha<-m.sf.g1.mcmc.array[,,1] %>% gather("Chain","Value",1:12)
m.sf.g1.mcmc.mualpha<-m.sf.g1.mcmc.array[,,1] %>% tidyr::gather("Chain","Value",1:12)
m.sf.g1.mcmc.mualpha<-as.data.table(m.sf.g1.mcmc.array[,,1]) %>% tidyr::gather("Chain","Value",1:12)
ggplot(m.sf.g1.mcmc.mualpha,aes(x=Value #,fill=factor(Run),color=factor(Run)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(.~Chain)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
ggplot(m.sf.g1.mcmc.mualpha,aes(x=Value,fill=factor(Chain),color=factor(Chain)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
dimnames(m.mcmc.bychain)
sf<-m.sf.g1.mcmc
m.mcmc.array<-as.array(sf)
m.mcmc.array
dimnames(m.mcmc.array)
which(dimnames(m.mcmc.array)=="mu_p[2]"
show.dist.by.chain<- function(sf,value){
m.mcmc.array<-as.array(sf)
#so let's take a look at the distribution....
m.mcmc.bychain<-as.data.table(m.mcmc.bychain[,,1]) %>% tidyr::gather("Chain","Value",1:12)
ggplot(m.mcmc.bychain,aes(x=Value,fill=factor(Chain),color=factor(Chain)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
}
show.dist.by.chain()
which(dimnames(m.mcmc.array)=="mu_p[2]")
which(dimnames(m.mcmc.array)[[1]]=="mu_p[2]")
which(dimnames(m.mcmc.array)[[2]]=="mu_p[2]")
which(dimnames(m.mcmc.array)[[3]]=="mu_p[2]")
show.dist.by.chain<- function(sf,value){
m.mcmc.array<-as.array(sf)
var.ci.to.show<-which(dimnames(m.mcmc.array)[[3]]==value)
#so let's take a look at the distribution....
m.mcmc.bychain<-as.data.table(m.mcmc.bychain[,,var.ci.to.show]) %>% tidyr::gather("Chain","Value",1:12)
ggplot(m.mcmc.bychain,aes(x=Value,fill=factor(Chain),color=factor(Chain)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
}
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]")
show.dist.by.chain<- function(sf,value){
m.mcmc.array<-as.array(sf)
var.ci.to.show<-which(dimnames(m.mcmc.array)[[3]]==value)
#so let's take a look at the distribution....
m.mcmc.bychain<-as.data.table(m.mcmc.array[,,var.ci.to.show]) %>% tidyr::gather("Chain","Value",1:12)
ggplot(m.mcmc.bychain,aes(x=Value,fill=factor(Chain),color=factor(Chain)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
}
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]")
show.dist.by.chain<- function(sf,value){
m.mcmc.array<-as.array(sf)
var.ci.to.show<-which(dimnames(m.mcmc.array)[[3]]==value)
#so let's take a look at the distribution....
m.mcmc.bychain<-as.data.table(m.mcmc.array[,,var.ci.to.show]) %>% tidyr::gather("Chain","Value",1:12)
ggplot(m.mcmc.bychain,aes(x=Value,fill=factor(Chain),color=factor(Chain)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
#geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
scale_x_continuous(x=c(-0.8,0))+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
}
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]")
show.dist.by.chain<- function(sf,value){
m.mcmc.array<-as.array(sf)
var.ci.to.show<-which(dimnames(m.mcmc.array)[[3]]==value)
#so let's take a look at the distribution....
m.mcmc.bychain<-as.data.table(m.mcmc.array[,,var.ci.to.show]) %>% tidyr::gather("Chain","Value",1:12)
ggplot(m.mcmc.bychain,aes(x=Value,fill=factor(Chain),color=factor(Chain)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
#geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
scale_x_continuous(limits=c(-0.8,0))+
labs(title=paste0("mu, sigma statistic (all rounds), alpha, variable number of runs model"))
}
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]")
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[2]")
show.dist.by.chain<- function(sf,value){
m.mcmc.array<-as.array(sf)
var.ci.to.show<-which(dimnames(m.mcmc.array)[[3]]==value)
#so let's take a look at the distribution....
m.mcmc.bychain<-as.data.table(m.mcmc.array[,,var.ci.to.show]) %>% tidyr::gather("Chain","Value",1:12)
ggplot(m.mcmc.bychain,aes(x=Value,fill=factor(Chain),color=factor(Chain)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
#geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
scale_x_continuous(limits=c(-0.8,0))+
labs(title=paste0(value,", variable number of runs model"))
}
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]")
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[2]")
show.dist.by.chain<- function(sf,value){
m.mcmc.array<-as.array(sf)
var.ci.to.show<-which(dimnames(m.mcmc.array)[[3]]==value)
#so let's take a look at the distribution....
m.mcmc.bychain<-as.data.table(m.mcmc.array[,,var.ci.to.show]) %>% tidyr::gather("Chain","Value",1:12)
ggplot(m.mcmc.bychain,aes(x=Value,fill=factor(Chain),color=factor(Chain)
))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
#geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
#scale_x_continuous(limits=c(-0.8,0))+
labs(title=paste0(value,", variable number of runs model"))
}
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]")
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[2]")
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a" & model.summaries[[i]]$g==1
){
print("got it")
m.g1.mcmc<-model.summaries[[i]]
m.sf.g1.mcmc<-model.stanfits[[i]]
m.sf.g2.mcmc<-model.stanfits[[i+1]]
}
}
show.dist.by.chain(m.sf.g2.mcmc,"mu_p[1]")
show.dist.by.chain(m.sf.g2.mcmc,"mu_p[2]")
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]")
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a"# & model.summaries[[i]]$g==1
){
representativeness_stats(model.summaries[[i]],model.stanfits[[i]],c("mu_p[1]","mu_p[2]"))
}
}
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]")
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
knitr::opts_knit$set(root.dir="../")
source("diagnostics.R")
#this content originally saved in diagnostic-rev2aa-MCMC-group1-distribution-error.r
#what we have here is just the key needed bits.
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a" & model.summaries[[i]]$g==1
){
print("got it")
m.g1.mcmc<-model.summaries[[i]]
m.sf.g1.mcmc<-model.stanfits[[i]]
m.sf.g2.mcmc<-model.stanfits[[i+1]]
}
}
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]")
show.dist.by.chain(m.sf.g2.mcmc,"mu_p[1]")
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[2]")
show.dist.by.chain(m.sf.g2.mcmc,"mu_p[2]")
source("diagnostics.R")
#this content originally saved in diagnostic-rev2aa-MCMC-group1-distribution-error.r
#what we have here is just the key needed bits.
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a" & model.summaries[[i]]$g==1
){
print("got it")
m.g1.mcmc<-model.summaries[[i]]
m.sf.g1.mcmc<-model.stanfits[[i]]
m.sf.g2.mcmc<-model.stanfits[[i+1]]
}
}
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]","group 1")
show.dist.by.chain(m.sf.g2.mcmc,"mu_p[1]","group 2")
show.dist.by.chain(m.sf.g1.mcmc,"mu_p[2]","group 1")
show.dist.by.chain(m.sf.g2.mcmc,"mu_p[2]","group 2")
library(gridExtra)
source("diagnostics.R")
#this content originally saved in diagnostic-rev2aa-MCMC-group1-distribution-error.r
#what we have here is just the key needed bits.
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a" & model.summaries[[i]]$g==1
){
#print("got it")
m.g1.mcmc<-model.summaries[[i]]
m.sf.g1.mcmc<-model.stanfits[[i]]
m.sf.g2.mcmc<-model.stanfits[[i+1]]
}
}
library(gridExtra)
g1<-show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]","group 1")
g2<-show.dist.by.chain(m.sf.g2.mcmc,"mu_p[1]","group 2")
g3<-show.dist.by.chain(m.sf.g1.mcmc,"mu_p[2]","group 1")
g4<-show.dist.by.chain(m.sf.g2.mcmc,"mu_p[2]","group 2")
grid.arrange(g1,g2,g3,g4)
source("diagnostics.R")
#this content originally saved in diagnostic-rev2aa-MCMC-group1-distribution-error.r
#what we have here is just the key needed bits.
for (i in 1:length(model.summaries)){
if(model.summaries[[i]]$m=="double_update_nov_rev2-a-a" & model.summaries[[i]]$g==1
){
#print("got it")
m.g1.mcmc<-model.summaries[[i]]
m.sf.g1.mcmc<-model.stanfits[[i]]
m.sf.g2.mcmc<-model.stanfits[[i+1]]
}
}
library(gridExtra)
g1<-show.dist.by.chain(m.sf.g1.mcmc,"mu_p[1]","group 1")
g2<-show.dist.by.chain(m.sf.g2.mcmc,"mu_p[1]","group 2")
g3<-show.dist.by.chain(m.sf.g1.mcmc,"mu_p[2]","group 1")
g4<-show.dist.by.chain(m.sf.g2.mcmc,"mu_p[2]","group 2")
grid.arrange(g1,g2,g3,g4)
dbeta
dbeta(4,10)
dbeta(1:100,4,10)
dbeta(0.5,4,10)
dbeta((1:100)/100,4,10)
plot(dbeta((1:100)/100,4,10))
plot(dbeta((1:100)/100,4,10))*14
plot(dbeta((1:100)/100,4,10)*14)
plot(dbeta((1:100)/100*14,4,10))
plot(dbeta((1:100)/100,4,10))
4/14
plot(dbeta((1:100)/100,40,100))
plot(dbeta((1:100)/100,2,7))
plot(dbeta((1:100)/100,1,3.5))
plot(dbeta((1:100)/100,2,5))
library(LaplacesDemon)
install.packages("LaplacesDemon")
library(LaplacesDemon)
phalfcauchy(1,25)
phalfcauchy(0,5)
phalfcauchy(25,5)
phalfcauchy(25,25)
plot(phalfcauchy(1:100,25))
plot(phalfcauchy(1:100,25))
plot(dhalfcauchy(1:100,25))
plot(dhalfcauchy(0:100,25))
plot(dhalfcauchy(0:100,5))
plot(dhalfcauchy(0:100,25))
plot(rhalfcauchy(0:100,25))
plot(qhalfcauchy(0:100,25))
plot(qhalfcauchy(0.5,25))
qhalfcauchy(0.5,25)
qhalfcauchy(0.6,25)
qhalfcauchy(0.95,25)
qhalfcauchy(c(0.025,0.975),25)
dbeta(2,2)
dbeta(1:10,2,2)
plot(dbeta((1:100)/100,1,3.5))
plot(dbeta((1:100)/100,10,100))
plot(dbeta((1:100)/100,90,100))
plot(dbeta((1:100)/100,90,10))
plot(dbeta((1:100)/100,40,60))
plot(dbeta((1:100)/100,1,1))
plot(dbeta((1:100)/100,2,2))
plot(dhalfcauchy((0:100)/20,0.1))
vals<-0:100/10
vals
plot(vals, dhalfcauchy(vals,0.1))
plot(vals, dhalfcauchy(vals,0.5))
vals<-0:100/20
plot(vals, dhalfcauchy(vals,0.5))
plot(dbeta((1:100)/100,2,2))
plot(dbeta((1:100)/100,2,0.5))
plot(dbeta((1:100)/100,2,5))
plot(dbeta((1:100)/100,2,0.5))
plot(vals, dhalfcauchy(vals,2))
plot(dbeta((1:100)/100,2,1.5))
plot(vals, dhalfcauchy(vals,5))
vals<-0:1000/20
plot(vals, dhalfcauchy(vals,5))
qnorm(1)
qnorm(rnorm(100,0,1),0,1)
qnorm(rnorm(100,0,1))
rnorm(100,0,1)
qnorm(0.99,0,1)
pnorm(2.32,0,1)
pnorm(rnorm(100,0,1),0,1)
hist(pnorm(rnorm(100,0,1),0,1))
plot(pnorm(rnorm(100,0,1),0,1))
hist(pnorm(rnorm(100,0,1),0,1))
hist(pnorm(rnorm(1000,0,1),0,1))
hist(pnorm(rnorm(10000,0,1),0,1))
