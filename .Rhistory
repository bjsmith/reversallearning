"g"=g,"m"=m,"t"=t)
}else if(m=="double_update"){
model.summaries[[first_empty_list_pos]]<-
list("summaryObj"=data_summarize_double_update(rstan::extract(fit$fit),
outcome.type = rp,
run = runs),
"g"=g,"m"=m,"t"=t)
}else{
stop("f^<%! I don't recognize that model.")
}
#remove the fit object from memory, because it is pretty large!
rm(fit)
print("...summary data extracted.")
}
}
}
save(model.summaries,file="model-summaries.RData")
}
m.run1.punish.alpha.mu<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Parameter=="alpha" & Run==1]
#arrange all the data into a single data table.
model.summary.all<-NULL
for(ms in model.summaries){
print(ms$t)
ms.summaryObj<-ms$summaryObj
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
model.summary.all<-rbind(model.summary.all,ms.summaryObj)
}
}
m.run1.punish.alpha.mu<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Parameter=="alpha" & Run==1]
#nice.
#now, we should be able to ask how much of the variance is due to AnalysisRepetition, how much is due to Group, how much is due to ModelName
#to keep things simple we will start with mu-alpha, run1, and treat iteration as random variable
var.res.alpha<-aov(Value~factor(AnalysisRepetition)+factor(Group)+ModelName,m.run1.punish.alpha.mu)
print(summary(var.res.alpha))
print(drop1(var.res.alpha,~.,test="F"))
m.run1.punish.beta.mu<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Parameter=="beta" & Run==1]
#nice.
#now, we should be able to ask how much of the variance is due to AnalysisRepetition, how much is due to Group, how much is due to ModelName
#to keep things simple we will start with mu-alpha, run1, and treat iteration as random variable
var.res.beta<-aov(Value~factor(AnalysisRepetition)+factor(Group)+ModelName,m.run1.punish.beta.mu)
print(summary(var.res.beta))
print(drop1(var.res.beta,~.,test="F"))
source("../visualization/geom_hdi.R")
m.reward.mu.run1<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Run==1]
table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.reward.mu.run1$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.reward.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.reward.mu.run1[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, beta"))
alpha.diff<-t.test(m.reward.mu.run1[Parameter=="alpha" & AnalysisRepetition==2 & ModelName=="DU_rpo_repeated_runs" & Group==3,Value] -
m.reward.mu.run1[Parameter=="alpha" & AnalysisRepetition==2 & ModelName=="DU_rpo_repeated_runs" & Group==2,Value])
if(file.exists("model-summaries.RData")){
load(file="model-summaries.RData")
}else{
model.summaries <- vector("list", 2*length(models_to_run)*times_to_run)
}
if(any(sapply(model.summaries,is.null))){
for (g in 2:3){
for (m in models_to_run){
for (t in 1:times_to_run){
print (paste0(g,m,t,collapse=", "))
#only run reward and punishment when we can
if(models_to_run %in% c("double_update_rpo_repeated_runs","double_update_rp_fixed","double_update_rp_erroneous")){
rp<-c(1,2)
}else{
rp<-c(2)
}
#only run multiple runs when we can
if(models_to_run %in% c("double_update_rpo_repeated_runs")){
runs=c(1,2)
generatePosteriorTrialPredictions=FALSE
}else{
runs=c(1)
generatePosteriorTrialPredictions=NA
}
#run the model
fit<-lookupOrRunFit(
run=runs,groups_to_fit=g, model_to_use=m,includeSubjGroup = FALSE,
rp=rp,
model_rp_separately=TRUE,model_runs_separately = TRUE, include_pain=FALSE,
fileSuffix=paste0("20170923_test_iteration_",as.character(t),generatePosteriorTrialPredictions=generatePosteriorTrialPredictions)
)
cat("...model loaded. Extracting...")
#save just the output we want.
first_empty_list_pos<-min(which(sapply(model.summaries,is.null)))
print(paste("first_empty_list_pos is", as.character(first_empty_list_pos)))
if(m=="double_update_rpo_repeated_runs"){
model.summaries[[first_empty_list_pos]]<-
list("summaryObj"=data_summarize_double_update_rpo_repeated_runs(rstan::extract(fit$fit)),
"g"=g,"m"=m,"t"=t)
}else if(m=="double_update_rp_erroneous" || m=="double_update_rp_fixed"){
model.summaries[[first_empty_list_pos]]<-
list("summaryObj"=data_summarize_double_update_rp(rstan::extract(fit$fit),
run = runs),
"g"=g,"m"=m,"t"=t)
}else if(m=="double_update"){
model.summaries[[first_empty_list_pos]]<-
list("summaryObj"=data_summarize_double_update(rstan::extract(fit$fit),
outcome.type = rp,
run = runs),
"g"=g,"m"=m,"t"=t)
}else{
stop("f^<%! I don't recognize that model.")
}
#remove the fit object from memory, because it is pretty large!
rm(fit)
print("...summary data extracted.")
}
}
}
save(model.summaries,file="model-summaries.RData")
}
#arrange all the data into a single data table.
model.summary.all<-NULL
for(ms in model.summaries){
ms.summaryObj<-ms$summaryObj
ms.summaryObj$Group<-ms$g
ms.summaryObj$ModelName<-ms$m
ms.summaryObj$AnalysisRepetition<-ms$t
if(is.null(model.summary.all)){
model.summary.all<-ms.summaryObj
}else{
model.summary.all<-rbind(model.summary.all,ms.summaryObj)
}
}
m.run1.punish.beta.mu<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Parameter=="beta" & Run==1]
#nice.
#now, we should be able to ask how much of the variance is due to AnalysisRepetition, how much is due to Group, how much is due to ModelName
#to keep things simple we will start with mu-alpha, run1, and treat iteration as random variable
var.res.beta<-aov(Value~factor(AnalysisRepetition)+factor(Group)+ModelName,m.run1.punish.beta.mu)
print(summary(var.res.beta))
print(drop1(var.res.beta,~.,test="F"))
m.run1.punish.alpha.mu<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Parameter=="alpha" & Run==1]
#nice.
#now, we should be able to ask how much of the variance is due to AnalysisRepetition, how much is due to Group, how much is due to ModelName
#to keep things simple we will start with mu-alpha, run1, and treat iteration as random variable
var.res.alpha<-aov(Value~factor(AnalysisRepetition)+factor(Group)+ModelName,m.run1.punish.alpha.mu)
print(summary(var.res.alpha))
print(drop1(var.res.alpha,~.,test="F"))
source("../visualization/geom_hdi.R")
m.reward.mu.run1<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Run==1]
table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.reward.mu.run1$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.reward.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.reward.mu.run1[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, beta"))
alpha.diff<-t.test(m.reward.mu.run1[Parameter=="alpha" & AnalysisRepetition==2 & ModelName=="DU_rpo_repeated_runs" & Group==3,Value] -
m.reward.mu.run1[Parameter=="alpha" & AnalysisRepetition==2 & ModelName=="DU_rpo_repeated_runs" & Group==2,Value])
alpha.diff<-t.test(m.reward.mu.run1[Parameter=="alpha" & AnalysisRepetition==2 & ModelName=="DU_rpo_repeated_runs" & Group==3,Value] -
m.reward.mu.run1[Parameter=="alpha" & AnalysisRepetition==2 & ModelName=="DU_rpo_repeated_runs" & Group==2,Value])
alpha.diff
ggplot(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs" & Group==3,Value] -
m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs" & Group==2,Value]
,
aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition)+
labs(title=paste0("Alpha "))
ggplot(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs" & Group==3,Value] -
m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs" & Group==2,Value]
,
aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
#geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition)+
labs(title=paste0("Alpha "))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
summary(alpha_lastModel)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
#geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition)+
labs(title=paste0("Alpha "))
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
#geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha "))
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha "))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
View(data)
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
d
View(d)
View(d)
data$hovertext<-apply(data,1,
function(r){
sub(paste0(params$hoverTextAes[["x"]],": \\d+(.\\d+)?(e\\d+)?"),
paste0(params$hoverTextAes[["x"]],": [",signif(as.numeric(r[["x"]]),4),", ",
signif(as.numeric(r[["xend"]],4)),"]"),r[["hovertext"]])
})
View(d)
View(data)
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
source("../visualization/geom_hdi.R")
m.reward.mu.run1<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Run==1]
table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.reward.mu.run1$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.reward.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
source("../visualization/geom_hdi.R")
m.reward.mu.run1<-model.summary.all[Motivation=="Reward" & Statistic=="mu" & Run==1]
table(m.reward.mu.run1$ModelName)
#for clarity's sake...
m.reward.mu.run1$ModelName<-sub("double_update","DU",m.reward.mu.run1$ModelName)
#plotly::ggplotly(p)
ggplot(m.reward.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.reward.mu.run1[Parameter=="alpha"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, alpha"))
ggplot(m.reward.mu.run1[Parameter=="beta"],aes(x=Value,fill=factor(Group),color=factor(Group)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(ModelName~AnalysisRepetition)+
labs(title=paste0("mu statistic in reward rounds, beta"))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
apply(data,1,
function(r){
sub(paste0(params$hoverTextAes[["x"]],": -?\\d+(.\\d+)?(e\\d+)?"),
paste0(params$hoverTextAes[["x"]],": [",signif(as.numeric(r[["x"]]),4),", ",
signif(as.numeric(r[["xend"]],4)),"]"),r[["hovertext"]])
})
paste0(params$hoverTextAes[["x"]],": -?\\d+(.\\d+)?(e\\d+)?")
sub(paste0(params$hoverTextAes[["x"]],": -?\\d+(.\\d+)?(e\\d+)?"),"aye",data$hovertext[1])
data$hovertext[2]
debugSource('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
d$y<-rep(1:dim(d)[1]/2,each=2)-1
rep(1:dim(d)[1]/2,each=2)-1
d$y
dim(d)
dim(d)[1]
dim(d)[1]/2
1:dim(d)[1]/2
d$y<-rep(1:(dim(d)[1]/2),each=2)-1
d
View(d)
source('~/GDrive/joint-modeling/reversal-learning/behavioral-analysis/reversallearning/visualization/geom_hdi.R')
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
facet_grid(AnalysisRepetition~.)+
labs(title=paste0("Alpha ")))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference,color=AnalysisRepetition))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
labs(title=paste0("Alpha ")))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference,color=AnalysisRepetition,fill=AnalysisRepetition))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
labs(title=paste0("Alpha ")))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference,color=AnalysisRepetition,fill=AnalysisRepetition,group=AnalysisRepetition))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
labs(title=paste0("Alpha ")))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference,color=factor(AnalysisRepetition)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
labs(title=paste0("Alpha ")))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference,color=factor(AnalysisRepetition)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
labs(title=paste0("learning rate NoMeth-Meth group difference credible values, by Analysis")),
color="AnalysisRepetition")
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference,color=factor(AnalysisRepetition)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
labs(title=paste0("learning rate NoMeth-Meth group difference credible values, by Analysis")),
legend="AnalysisRepetition")
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference,color=factor(AnalysisRepetition)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.9,credible_mass=0.95)+
labs(title=paste0("learning rate NoMeth-Meth group difference credible values, by Analysis")),
guide="AnalysisRepetition")
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference,color=factor(AnalysisRepetition)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
labs(title=paste0("learning rate NoMeth-Meth group difference credible values, by Analysis")))
alpha_lastModel<-tidyr::spread(m.reward.mu.run1[Parameter=="alpha" & ModelName=="DU_rpo_repeated_runs"],
Group, Value)
alpha_lastModel$GroupDifference<-alpha_lastModel$`2`-alpha_lastModel$`3`
plotly::ggplotly(ggplot(alpha_lastModel,
aes(x=GroupDifference,color=factor(AnalysisRepetition)))+
geom_freqpoly(alpha=0.9,binwidth=0.001)+
geom_hdi(size=2, lineend = "round",alpha=0.5,credible_mass=0.95)+
labs(title=paste0("learning rate NoMeth-Meth group difference credible values, by Analysis\nWith 95% Highest Density Intervals")))
